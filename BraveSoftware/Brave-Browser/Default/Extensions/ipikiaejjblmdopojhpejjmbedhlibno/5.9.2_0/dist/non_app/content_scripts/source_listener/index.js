(()=>{var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),("undefined"!=typeof window?window:void 0!==e.g?e.g:"undefined"!=typeof self?self:{}).SENTRY_RELEASE={id:"5.9.2+71eff9c"},(()=>{"use strict";new class{constructor(e=!1){this.debug=!1,this.debug=e,this.init()}init(){window.addEventListener("message",(async e=>{if(this.debug&&console.log(`Frame content script got event: ${JSON.stringify(e)}`),"GET_SOURCE"===e.data.type){this.debug&&console.log("------------------------"),this.debug&&console.log("got GET_SOURCE message");let o=document.documentElement.innerHTML;this.debug&&console.log("source: ",o);const t=e.data.iFrameSrc;if(t){const e=new URL(t).hostname;this.debug&&console.log("iFrameSrcHostname: ",e);const n=/(src|href)="\/(.*?)"/g;o=o.replace(n,`$1="https://${e}/$2"`),this.debug&&console.log("fixed source: ",o)}const n=t??"root";try{chrome.runtime.sendMessage({action:"gotPageSource",frameKey:n,source:o})}catch(e){console.warn("Error while sending frame source to SwiftRead, falling back to old extraction logic. Error: "+e)}}}),!1)}}(!1)})()})();
//# sourceMappingURL=index.js.map
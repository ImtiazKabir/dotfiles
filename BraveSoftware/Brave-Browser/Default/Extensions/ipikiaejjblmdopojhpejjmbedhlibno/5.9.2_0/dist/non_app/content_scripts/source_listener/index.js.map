{"version":3,"file":"non_app/content_scripts/source_listener/index.js","mappings":"MACA,IAAIA,EAAsB,CAAC,ECD3BA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,ICAS,oBAAXA,OAAyBA,YAA2B,IAAX,EAAAL,EAAyB,EAAAA,EAAyB,oBAATM,KAAuBA,KAAO,CAAC,GAAYC,eAAe,CAACC,GAAG,iB,mBCC3I,ICDpB,MAEL,WAAAC,CAAYC,GAAiB,GAD7B,KAAAA,OAAiB,EAEfR,KAAKQ,MAAQA,EACbR,KAAKS,MACP,CAEQ,IAAAA,GACNN,OAAOO,iBACL,WACAC,MAAOC,IAML,GALIZ,KAAKQ,OACPK,QAAQC,IACN,mCAAmCC,KAAKC,UAAUJ,MAI/C,eADCA,EAAMK,KAAKC,KACjB,CACMlB,KAAKQ,OAAOK,QAAQC,IAAI,4BACxBd,KAAKQ,OAAOK,QAAQC,IAAI,0BAC5B,IAAIK,EAASC,SAASC,gBAAgBC,UAClCtB,KAAKQ,OAAOK,QAAQC,IAAI,WAAYK,GAGxC,MAAMI,EAAYX,EAAMK,KAAKM,UAE7B,GAAIA,EAAW,CAEb,MAAMC,EAAoB,IAAIC,IAAIF,GAAWG,SACzC1B,KAAKQ,OACPK,QAAQC,IAAI,sBAAuBU,GAErC,MAAMG,EAAoB,wBAE1BR,EAASA,EAAOS,QACdD,EACA,eAAeH,SAGbxB,KAAKQ,OAAOK,QAAQC,IAAI,iBAAkBK,E,CAGhD,MAAMU,EAAWN,GAAa,OAG9B,IACEO,OAAOC,QAAQC,YAAY,CACzBC,OAAQ,gBACRJ,SAAUA,EACVV,OAAQA,G,CAEV,MAAOjB,GACPW,QAAQqB,KACN,+FACEhC,E,CAID,C,IAKX,EAEJ,IDhEgD,E","sources":["webpack://extension/webpack/bootstrap","webpack://extension/webpack/runtime/global","webpack://extension/./node_modules/@sentry/webpack-plugin/src/sentry-webpack.module.js","webpack://extension/./spreed/src/non_app/content_scripts/source_listener/index.ts","webpack://extension/./spreed/src/non_app/content_scripts/source_listener/HTMLSourceListener.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var _global = (typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {}); _global.SENTRY_RELEASE={id:\"5.9.2+71eff9c\"};","import { HTMLSourceListener } from \"./HTMLSourceListener\";\nconst htmlSourceListener = new HTMLSourceListener(false);\n","export class HTMLSourceListener {\n  debug: boolean = false;\n  constructor(debug: boolean = false) {\n    this.debug = debug;\n    this.init();\n  }\n\n  private init() {\n    window.addEventListener(\n      \"message\",\n      async (event) => {\n        if (this.debug)\n          console.log(\n            `Frame content script got event: ${JSON.stringify(event)}`\n          );\n\n        switch (event.data.type) {\n          case \"GET_SOURCE\":\n            if (this.debug) console.log(\"------------------------\");\n            if (this.debug) console.log(\"got GET_SOURCE message\");\n            let source = document.documentElement.innerHTML;\n            if (this.debug) console.log(\"source: \", source);\n\n            // if iFrameSrc exists (is iframe), use iFrameSrc domain to reconstruct any relative paths in the iframe's content\n            const iFrameSrc = event.data.iFrameSrc;\n            // console.log(\"iFrameSrc: \", iFrameSrc);\n            if (iFrameSrc) {\n              // get hostname from iFrameSrc\n              const iFrameSrcHostname = new URL(iFrameSrc).hostname;\n              if (this.debug)\n                console.log(\"iFrameSrcHostname: \", iFrameSrcHostname);\n\n              const relativePathRegex = /(src|href)=\"\\/(.*?)\"/g;\n              // replace all relative paths in fixedSource with absolute paths\n              source = source.replace(\n                relativePathRegex,\n                `$1=\"https://${iFrameSrcHostname}/$2\"`\n              );\n\n              if (this.debug) console.log(\"fixed source: \", source);\n            }\n\n            const frameKey = iFrameSrc ?? \"root\";\n\n            // send source back to background script\n            try {\n              chrome.runtime.sendMessage({\n                action: \"gotPageSource\",\n                frameKey: frameKey,\n                source: source,\n              });\n            } catch (e) {\n              console.warn(\n                \"Error while sending frame source to SwiftRead, falling back to old extraction logic. Error: \" +\n                  e\n              );\n            }\n\n            break;\n          default:\n            break;\n        }\n      },\n      false\n    );\n  }\n}\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","self","SENTRY_RELEASE","id","constructor","debug","init","addEventListener","async","event","console","log","JSON","stringify","data","type","source","document","documentElement","innerHTML","iFrameSrc","iFrameSrcHostname","URL","hostname","relativePathRegex","replace","frameKey","chrome","runtime","sendMessage","action","warn"],"sourceRoot":""}
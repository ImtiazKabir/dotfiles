{"version":3,"file":"non_app/content_scripts/swiftread_app/index.js","mappings":"MACA,IAAIA,EAAsB,CAAC,ECD3BA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,ICAS,oBAAXA,OAAyBA,YAA2B,IAAX,EAAAL,EAAyB,EAAAA,EAAyB,oBAATM,KAAuBA,KAAO,CAAC,GAAYC,eAAe,CAACC,GAAG,iB,mBCmCpJH,OAAOI,SAASC,KACpBC,SAAS,iBAXSC,WAC9BC,QAAQC,IAAI,uCAEZ,MAAMC,EAAWC,aAAY,KA1BRJ,OAAOK,IAC5B,MAGMC,EAHM,IAAIC,IAAId,OAAOI,SAASC,MAGjBU,aACbC,EAAcH,EAAOI,IAAI,gBACzBC,EAAeL,EAAOI,IAAI,iBAE5BD,GAAeE,IACjBV,QAAQC,IAAI,eAAgBO,EAAaE,GAmBvCC,cAAcT,SAfVU,OAAOC,QAAQC,MAAMC,OAAO,CAAC,cAAe,uBAE5CH,OAAOC,QAAQC,MAAME,IAAI,CAC7BR,YAAaA,EACbE,aAAcA,IAEhBV,QAAQC,IAAI,gC,EAQZgB,EAEE,GACD,IAAI,EAKPC,E","sources":["webpack://extension/webpack/bootstrap","webpack://extension/webpack/runtime/global","webpack://extension/./node_modules/@sentry/webpack-plugin/src/sentry-webpack.module.js","webpack://extension/./spreed/src/non_app/content_scripts/swiftread_app/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var _global = (typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {}); _global.SENTRY_RELEASE={id:\"5.9.2+71eff9c\"};","// console.log('Hello from SwiftRead app content script')\n\nconst checkForTokens = async (beforeComplete: () => void) => {\n  const url = new URL(window.location.href)\n  //   console.log(\"checking url for tokens: \", url);\n  // if url has accessToken and refreshToken, send them to background script\n  const params = url.searchParams\n  const accessToken = params.get('access_token')\n  const refreshToken = params.get('refresh_token')\n\n  if (accessToken && refreshToken) {\n    console.log('got tokens: ', accessToken, refreshToken)\n    beforeComplete()\n\n    // first, reset the access and refresh tokens in storage\n    await chrome.storage.local.remove(['accessToken', 'refreshToken'])\n    // set them in chrome storage\n    await chrome.storage.local.set({\n      accessToken: accessToken,\n      refreshToken: refreshToken,\n    })\n    console.log('set tokens in chrome storage')\n  }\n}\n\nconst initSignInContentScript = async () => {\n  console.log('initializing sign in content script')\n  // every half second, check if the url has the access and refresh tokens\n  const interval = setInterval(() => {\n    checkForTokens(() => {\n      clearInterval(interval)\n    })\n  }, 500)\n}\n\nconst urlString = window.location.href\nif (urlString.includes('auth/sign-in')) {\n  initSignInContentScript()\n}\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","self","SENTRY_RELEASE","id","location","href","includes","async","console","log","interval","setInterval","beforeComplete","params","URL","searchParams","accessToken","get","refreshToken","clearInterval","chrome","storage","local","remove","set","checkForTokens","initSignInContentScript"],"sourceRoot":""}